1.3
public class Stack<Item> implements Iterable<Item>
 {Stack() create an empty stack
  void push(Item item) add an item
  Item pop() remove the most recently added item
  boolean isEmpty() is the stack empty?
  int size() number of items in the stack
  }
Generics. 
An essential characteristic of collection ADTs is that we should be able to use
them for any type of data. A specific Java mechanism known as generics, also known
as parameterized types, enables this capability. 
The notation <Item> after the class name in each of our APIs defines the name Item as a type parameter, a symbolic placeholder
for some concrete type to be used by the client. You can read Stack<Item> as
“stack of items.” When implementing Stack, we do not know the concrete type of Item,
but a client can use our stack for any type of data, including one defined long after we
develop our implementation. The client code provides a concrete type when the stack
is created: we can replace Item with the name of any reference data type (consistently,
everywhere it appears). This provides exactly the capability that we need. For example,
you can write code such as
Stack<String> stack = new Stack<String>();
stack.push("Test");
...
String next = stack.pop();
to use a stack for String objects.
with generics, we can use one API (and one implementation) for all types of data, even types that are implemented
in the future.

Iterable collections.
With it, we can write clear and compact code that is free
from dependence on the details of a collection’s implementation. For example, suppose
that a client maintains a collection of transactions in a Queue, as follows:
Queue<Transaction> collection = new Queue<Transaction>();
If the collection is iterable, the client can print a transaction list with a single statement:
for (Transaction t : collection)
{ StdOut.println(t); }
This construct is known as the foreach statement: you can read the for statement as for
each transaction t in the collection, execute the following block of code. This client code
does not need to know anything about the representation or the implementation of the
collection; it just wants to process each of the items in the collection.

For historical and technical reasons beyond our scope, generic array creation is disallowed in Java. Instead, we need to use a cast:
a = (Item[]) new Object[cap];

P136
