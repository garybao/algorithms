1.3
public class Stack<Item> implements Iterable<Item>
 {Stack() create an empty stack
  void push(Item item) add an item
  Item pop() remove the most recently added item
  boolean isEmpty() is the stack empty?
  int size() number of items in the stack
  }
Generics. An essential characteristic of collection ADTs is that we should be able to use
them for any type of data. A specific Java mechanism known as generics, also known
as parameterized types, enables this capability. 
The notation <Item> after the class name in each of our APIs defines the name Item as a type parameter, a symbolic placeholder
for some concrete type to be used by the client. You can read Stack<Item> as
“stack of items.” When implementing Stack, we do not know the concrete type of Item,
but a client can use our stack for any type of data, including one defined long after we
develop our implementation. The client code provides a concrete type when the stack
is created: we can replace Item with the name of any reference data type (consistently,
everywhere it appears). This provides exactly the capability that we need. For example,
you can write code such as
Stack<String> stack = new Stack<String>();
stack.push("Test");
...
String next = stack.pop();
to use a stack for String objects.
